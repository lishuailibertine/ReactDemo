"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const figma_transformer_1 = require("figma-transformer");
const ramda_1 = require("ramda");
const filterByCanvas = (canvasFilter) => (data) => {
    const canvasList = data.shortcuts
        .CANVAS;
    if (typeof canvasFilter === "string") {
        return ramda_1.filter((canvas) => canvas.name === canvasFilter)(canvasList);
    }
    return ramda_1.filter(canvasFilter)(canvasList);
};
const filterByNode = (nodeFilter) => (data) => {
    if (typeof nodeFilter === "string") {
        return ramda_1.filter((node) => node.name === nodeFilter)(data);
    }
    return ramda_1.filter(nodeFilter)(data);
};
const getComponents = (transformerNode) => ramda_1.chain((node) => node.shortcuts.COMPONENT)(transformerNode);
const getSvgDataFromImageData = (svgsUrls) => (node) => {
    return { id: node.id, url: svgsUrls[node.id], name: node.name };
};
exports.default = (client) => async (config) => {
    const fileData = await client.file(config.fileId);
    const processedFile = figma_transformer_1.processFile(fileData.data, config.fileId);
    const fileLastModified = fileData.data.lastModified;
    const optionallyFilterByCanvas = (config.canvas
        ? filterByCanvas(config.canvas)
        : ramda_1.identity);
    const optionallyFilterByComponent = (config.component
        ? filterByNode(config.component)
        : ramda_1.identity);
    const componentsData = ramda_1.pipe(optionallyFilterByCanvas, getComponents, optionallyFilterByComponent)(processedFile);
    if (ramda_1.isEmpty(componentsData)) {
        return { svgs: [], lastModified: fileLastModified };
    }
    const svgsIds = ramda_1.map(ramda_1.prop("id"))(componentsData);
    const svgsExportResponse = await client.fileImages(config.fileId, {
        format: "svg",
        ids: svgsIds
    });
    const svgsUrls = svgsExportResponse.data.images;
    const svgsData = ramda_1.map(getSvgDataFromImageData(svgsUrls))(componentsData);
    return { svgs: svgsData, lastModified: fileLastModified };
};
