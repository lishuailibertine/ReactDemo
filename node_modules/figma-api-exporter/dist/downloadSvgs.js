"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const rimraf_1 = __importDefault(require("rimraf"));
const axios_1 = __importDefault(require("axios"));
const ramda_1 = require("ramda");
const createDir = (dir) => {
    return new Promise(resolve => {
        if (!fs.existsSync(dir)) {
            fs.mkdir(dir, null, resolve);
        }
        else {
            resolve();
        }
    });
};
const removeFilesFromDirectory = async (directory) => {
    return new Promise(resolve => rimraf_1.default(directory, resolve));
};
const getDataFromConfig = async (configFilePath) => {
    return new Promise(resolve => {
        fs.readFile(configFilePath, (err, data) => {
            if (err) {
                return resolve({});
            }
            const configData = JSON.parse(data.toString());
            return resolve(configData);
        });
    });
};
const downloadSvgsData = (svgsData) => Promise.all(svgsData.map(async (data) => {
    const downloadedSvg = await axios_1.default.get(data.url);
    return {
        data: downloadedSvg.data,
        name: data.name
    };
}));
const saveSvgsToFiles = async (downloadedSvgsData, saveDirectory) => {
    await Promise.all(downloadedSvgsData.map(svgData => new Promise(resolve => fs.writeFile(path.join(saveDirectory, `${svgData.name}.svg`), svgData.data, resolve))));
};
const saveConfigFile = async (configFilePath, fileData) => {
    return new Promise(resolve => {
        fs.writeFile(configFilePath, JSON.stringify(fileData), resolve);
    });
};
exports.default = async (config) => {
    const DOWNLOAD_CONFIG_FILENAME = "downloadData.json";
    const componentIds = ramda_1.map((data) => data.id)(config.svgsData);
    const dataFromConfig = await getDataFromConfig(path.join(config.saveDirectory, DOWNLOAD_CONFIG_FILENAME));
    const shouldDownloadSvgs = config.lastModified !== dataFromConfig.lastModified ||
        !ramda_1.equals(componentIds, dataFromConfig.componentIds);
    if (!shouldDownloadSvgs) {
        return Promise.resolve();
    }
    if (config.clearDirectory) {
        await removeFilesFromDirectory(config.saveDirectory);
    }
    await createDir(config.saveDirectory);
    const downloadedSvgsData = await downloadSvgsData(config.svgsData);
    await saveSvgsToFiles(downloadedSvgsData, config.saveDirectory);
    await saveConfigFile(path.join(config.saveDirectory, DOWNLOAD_CONFIG_FILENAME), { lastModified: config.lastModified, componentIds });
};
